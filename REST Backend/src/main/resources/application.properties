
###############################################
### APPLICATION CONNECTIVITY CONFIGURATIONS ###
###############################################

# Use when working in Docker; 'mysql' is the name of the MySQL Docker image
database.ip = ${MYSQL_IP:mysql}
# Use when testing locally, outside Docker
# database.ip = ${MYSQL_IP:localhost}

database.port = ${MYSQL_PORT:3306}
database.person = ${MYSQL_USER:root}
database.password = ${MYSQL_PASSWORD:root}
database.name = ${MYSQL_DBNAME:medical-platform}


grpc.server.port = 8980

# Use when working within Docker ('rabbitmq' is the name of the RabbitMQ image)
# For testing locally, comment it out, so the default 'localhost' is used instead
spring.rabbitmq.host = rabbitmq

# Use when working in Docker; 'soap-backend' is the name of the Docker image running the server
# Note that this must also be changed in POM to fetch from correct WSDL
# TODO: switch to using profiles, so can simply switch to profile 'LocalTesting' in POM and be done
soap.server.host = soap-backend
# Use when testing locally, outside Docker
# soap.server.host = localhost

#############################################
### SPRING CONFIGURATIONS FOR THE DATABASE ###
##############################################
## Spring DATASOURCE (DataSourceAutoConfiguration & DataSourceProperties)
spring.datasource.url = jdbc:mysql://${database.ip}:${database.port}/${database.name}?allowPublicKeyRetrieval=true&useSSL=false&useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
spring.datasource.username = ${database.person}
spring.datasource.password = ${database.password}

## Hibernate Properties
# The SQL dialect makes Hibernate generate better SQL for the chosen database
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Expecting this to break a bunch of stuff, but it's good for performance - ask Vlad Mihalcea
spring.jpa.open-in-view = false

# Hibernate ddl auto (create, create-drop, validate, update)
spring.jpa.hibernate.ddl-auto = update

# Sql queries logging
logging.level.org.hibernate.SQL=DEBUG

#server.port=8080

## Spring security
# The format used for the keystore. It could be set to JKS in case it is a JKS file
server.ssl.key-store-type=PKCS12
# The path to the keystore containing the certificate
server.ssl.key-store=classpath:keystore/ks.p12
# The password used to generate the certificate
server.ssl.key-store-password=password
# The alias mapped to the certificate
server.ssl.key-alias=ks

# Setting security.require-ssl is deprecated, so we're not setting that